package ser321.assign2;

import java.text.DecimalFormat;
import java.lang.Double;
import org.json.JSONObject;
import ser321.*;
import javax.swing.*;
import java.io.*;
import javax.swing.event.*;
import javax.swing.text.html.*;
import java.awt.event.*;
import java.awt.*;
import java.util.*;

/**
 * Copyright (c) 2018 Tim Lindquist,
 * Software Engineering,
 * Arizona State University at the Polytechnic campus
 * <p/>
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation version 2
 * of the License.
 * <p/>
 * This program is distributed in the hope that it will be useful,
 * but without any warranty or fitness for a particular purpose.
 * <p/>
 * Please review the GNU General Public License at:
 * http://www.gnu.org/licenses/gpl-2.0.html
 * see also: https://www.gnu.org/licenses/gpl-faq.html
 * so you are aware of the terms and your rights with regard to this software.
 * Or, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,USA
 * <p/>
 * Purpose: Java client UI for Waypoint management.
 * This class creates Gui components for a UI to manage waypoints.
 * This software is meant to run on OSX, and Windows Cygwin using g++.
 * SampleAssign2 demonstrates use of the WaypointGUI class
 * for solving ser321 assignments.
 * WaypointGUI class uses Swing components JTextField, JComboBox, and
 * JTextArea to realize a GUI for Waypoint management. 
 * <p/>
 * Ser321 Principles of Distributed Software Systems.
 * see http://pooh.poly.asu.edu/Ser321
 * @author Tim Lindquist (Tim.Lindquist@asu.edu) CIDSE - Software Engineering
 *                       Ira Fulton Schools of Engineering, ASU Polytechnic
 * @file    WaypointGUI.java
 * @date    January, 2018
 * @license See above
 */
public class SampleAssign2 extends WaypointGUI implements
                                               ActionListener, ItemListener {
	
   private static final boolean debugOn = true;
   WaypointLibrary wpLib;
   
   public SampleAssign2(String base) {
      super(base);
      wpLib = new WaypointLibrary();
      removeWPButt.addActionListener(this);
      addWPButt.addActionListener(this);
      modWPButt.addActionListener(this);
      importButt.addActionListener(this);
      exportButt.addActionListener(this);
      distBearButt.addActionListener(this);
      frWps.addItemListener(this);
      toWps.addItemListener(this);

      this.addWindowListener(new WindowAdapter() {
         @Override
         public void windowClosing(WindowEvent e) {
            debug("you clicked X");
            System.exit(0);
         }
      });

      setVisible(true);
   }

   public void itemStateChanged(ItemEvent event){
      if(event.getStateChange() == ItemEvent.SELECTED){
         Object comp = event.getSource();
         debug("Selection event generated by "+
                            ((comp==frWps)?"from ":"to ")+"combobox. "+
                            "Selected waypoint is: "+(String)event.getItem());
	if(comp == frWps && frWps.getSelectedItem() != "from waypoint")
            dispFrom();
        else if (toWps.getSelectedItem() != "to waypoint")
	    dispTo();	
      }
   }

   public void dispFrom() {
       //get the data members of the object in frmWpt
       JSONObject obj = wpLib.obj.getJSONObject((String) frWps.getSelectedItem());
       nameIn.setText(obj.getString("name")); 
       addrIn.setText(obj.getString("address")); 
       latIn.setText(String.valueOf(obj.getDouble("lat"))); 
       lonIn.setText(String.valueOf(obj.getDouble("lon"))); 
       eleIn.setText(String.valueOf(obj.getInt("ele"))); 
   }
   
   public void dispTo() {
       //get the data members of the object in toWpt
       JSONObject obj = wpLib.obj.getJSONObject((String) toWps.getSelectedItem());
       nameIn.setText(obj.getString("name")); 
       addrIn.setText(obj.getString("address")); 
       latIn.setText(String.valueOf(obj.getDouble("lat"))); 
       lonIn.setText(String.valueOf(obj.getDouble("lon"))); 
       eleIn.setText(String.valueOf(obj.getInt("ele"))); 
   }

   /*Performs distace and bearing calculations between two waypoints and
    *displays the result in the appropriate text area*/

   public void actionPerformed(ActionEvent e) {
	 String name;
	 String addr;
	 Double lat;
	 Double lon;
	 Double ele;
	 String key;
      if(e.getActionCommand().equals("Remove")) {
         debug("you clicked Remove Waypoint");
	 key = (String)frWps.getSelectedItem();
	 wpLib.rmvWpt(key);
         frWps.removeItem(frWps.getSelectedItem());
         toWps.removeItem(key);
      }
      else if(e.getActionCommand().equals("Add")) {
         debug("you clicked Add Waypoint");
	 name = nameIn.getText();
	 addr = addrIn.getText();
	 lat = Double.parseDouble(latIn.getText());
	 lon = Double.parseDouble(lonIn.getText());
	 ele = Double.parseDouble(eleIn.getText());
	 wpLib.addWpt(name, lat, lon, ele, addr);
         frWps.addItem(nameIn.getText());
         toWps.addItem(nameIn.getText());
         distBearIn.setText("Added: "+nameIn.getText());
      }
      else if(e.getActionCommand().equals("Modify")) {
         debug("you clicked Modify Waypoint");
	 name = nameIn.getText();
	 addr = addrIn.getText();
	 lat = Double.parseDouble(latIn.getText());
	 lon = Double.parseDouble(lonIn.getText());
	 ele = Double.parseDouble(eleIn.getText());
	 if(wpLib.modLib(name, lat, lon, ele, addr))
             debug("Library modified!");
	 else
             debug("Entry not present in library");
      }
      else if(e.getActionCommand().equals("Import")) {
	 wpLib.imptLib();
	 for(int i = 0; i < wpLib.wpts.size(); i++) {
	    frWps.addItem(wpLib.wpts.elementAt(i).name); 
	    toWps.addItem(wpLib.wpts.elementAt(i).name);
	 }
         debug("you clicked Import Json Library");
      }
      else if(e.getActionCommand().equals("Export")) {
	 wpLib.exptLib();
         debug("you clicked Export Json Library");
      }
      else if(e.getActionCommand().equals("Distance")) {
         debug("you clicked Distance and Bearing");
	 calcToString();
      }
   }

   private void debug(String message) {
      if (debugOn)
         System.out.println("debug: "+message);
   }

   /*Using law of cosines formula this method provides the distance between
    *two points*/
   public String dist() {
       final double radi= 6371e3;
       JSONObject obj = wpLib.obj.getJSONObject((String) frWps.getSelectedItem());
       double varphi1 = Math.toRadians(obj.getDouble("lat"));
       double lon1 = obj.getDouble("lon");
       obj = wpLib.obj.getJSONObject((String) toWps.getSelectedItem());
       double varphi2 = Math.toRadians(obj.getDouble("lat"));
       double lon2 = obj.getDouble("lon");
       double dLamb = Math.toRadians((lon2 - lon1));
       //Law of cosines
       double result = Math.acos((Math.sin(varphi1) * Math.sin(varphi2)) + (Math.cos(varphi1) * Math.cos(varphi2) * Math.cos(dLamb))) * radi;
       result /= 1000;
       DecimalFormat df2 = new DecimalFormat(".##");
       return df2.format(result).toString();
   }

   public String bearing(){
       JSONObject obj = wpLib.obj.getJSONObject((String) frWps. getSelectedItem());
       double varphi1 = Math.toRadians(obj.getDouble("lat")); 
       double lon1 = obj.getDouble("lon");
       obj = wpLib.obj.getJSONObject((String) toWps.getSelectedItem());
       double varphi2 = Math.toRadians(obj.getDouble("lat"));
       double lon2 = obj.getDouble("lon");
       double dLamb = Math.toRadians((lon2 - lon1));
       double result = Math.atan2(Math.sin(dLamb) * Math.cos(varphi2), (Math.cos(varphi1) * Math.sin(varphi2)) - (Math.sin(varphi1) * Math.cos(varphi2) * Math.cos(dLamb))); 
       //result = Math.toRadians(result);
       result = Math.toDegrees(result);
       result = (result + 360) % 360;
       DecimalFormat df2 = new DecimalFormat(".#");
       return df2.format(result).toString();
   }

   /*The results from calculating the distance and bearing shown on the GUI*/
   public void calcToString() {
      String dist = dist();
      String bear = bearing();
      distBearIn.setText(dist +" km " +  bear);
   }

   public static void main(String args[]) {
      try{
         String name = "Ser321";
         if (args.length >= 1) {
            name = args[0];
         }
         SampleAssign2 sa2 = new SampleAssign2(name);
      }catch (Exception ex){
         ex.printStackTrace();
      }
   }
}
