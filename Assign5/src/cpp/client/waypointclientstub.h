/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_WAYPOINTCLIENTSTUB_H_
#define JSONRPC_CPP_STUB_WAYPOINTCLIENTSTUB_H_

#include <jsonrpccpp/client.h>

class waypointclientstub : public jsonrpc::Client
{
    public:
        waypointclientstub(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        bool removeWpt(const std::string& param01) 
        {
            Json::Value p;
            p.append(param01);
            Json::Value result = this->CallMethod("removeWpt",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool addWpt(double param01, double param02, double param03, const std::string& param04, const std::string& param05) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            p.append(param03);
            p.append(param04);
            p.append(param05);
            Json::Value result = this->CallMethod("addWpt",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value impjson_file() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("impjson_file",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        bool expjson_file() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("expjson_file",p);
            if (result.isBool())
                return result.asBool();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value modWpt(double param01, double param02, double param03, const std::string& param04, const std::string& param05, const std::string& param06) 
        {
            Json::Value p;
            p.append(param01);
            p.append(param02);
            p.append(param03);
            p.append(param04);
            p.append(param05);
            p.append(param06);
            Json::Value result = this->CallMethod("modWpt",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        int get_size() 
        {
            Json::Value p;
            p = Json::nullValue;
            Json::Value result = this->CallMethod("get_size",p);
            if (result.isIntegral())
                return result.asInt();
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_WAYPOINTCLIENTSTUB_H_
