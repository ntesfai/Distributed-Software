<?xml version="1.0"?>
<project name="JsonRPC in CPP using libjson-rpc-cpp" default="targets">
   <taskdef resource="cpptasks.tasks"/>
   <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
   <property name="src.dir" value="src"/>
   <property name="dist.dir" value="bin"/>
   <property name="classes.dir" value="classes"/>
   <property name="obj.dir" value="obj"/>
   <property name="host.name" value="127.0.0.1"/>
   <property name="port.num" value="8080"/>
   <property name="json.file.name" value="waypointmethodlib.json"/>
   <property environment="env"/>
   <!--Set the ostype property: <property name="ostype" value="${env.OSTYPE}"/>-->
    <condition property="ostype" value="${env.OSTYPE}">
        <isset property="env.OSTYPE" />
    </condition>
    <condition property="ostype" value="env.OSTYPE_inaccessable">
        <not>
            <isset property="env.OSTYPE" />
        </not>
    </condition>

    <!--Set the dyldpath property <var name="dyldpath" value="${env.DYLD_FALLBACK_LIBRARY_PATH}"/>-->
    <condition property="dyldpath" value="${env.DYLD_FALLBACK_PATH}">
        <isset property="env.DYLD_FALLBACK_PATH" />
    </condition>
    <condition property="dyldpath" value="env.DYLD_FALLBACK_PATH_inaccessible">
        <not>
            <isset property="env.DYLD_FALLBACK_PATH" />
        </not>
    </condition>

   <target name="targets">
      <echo message="Targets are clean, prepare, build.all, generate.server.stub, build.cpp.server, generate.client.stub, build.cpp.client, build.java.client, targets"/>
      <echo message="base directory is: ${basedir} and ostype is ${ostype}"/>
      <echo message="execute cpp server with: ./bin/studentRPCServer ${port.num}"/>
      <echo message="execute cpp client with: ./bin/studentRPCClient http://${host.name}:${port.num}"/>
      <echo message="invoke java http client with: java -cp classes:lib/json.jar sample.student.client.StudentCollectionClient ${host.name} ${port.num}"/>
      
   </target>

   <path id="compile.classpath">
      <pathelement location="${classes.dir}"/>
      <fileset dir="${basedir}/lib">
         <include name="json.jar"/>
      </fileset>
   </path>

   <target name="clean">
      <delete dir="${classes.dir}" failonerror="false"/>
      <delete dir="${dist.dir}" failonerror="false"/>
      <delete dir="${obj.dir}" failonerror="false"/>
      <delete dir="log" failonerror="false"/>
      <delete file="log.txt" failonerror="false"/>
      <delete file="logerrors.txt" failonerror="false"/>
      <delete file="logpid.txt" failonerror="false"/>
      <delete file="${src.dir}/cpp/server/studentserverstub.h"
              failonerror="false"/>
      <delete file="${src.dir}/cpp/client/studentcollectionstub.h"
              failonerror="false"/>
   </target>

   <target name="prepare">
      <mkdir dir="${classes.dir}"/>
      <mkdir dir="${dist.dir}" />
      <mkdir dir="log" />
      <mkdir dir="${obj.dir}/client" />
      <mkdir dir="${obj.dir}/server" />
      <if>
         <isset property="env.USERNAME"/>
         <then>
            <echo message="detected username is: ${env.USERNAME}"/>
         </then>
      <elseif>
         <isset property="env.USER"/>
         <then>
            <echo message="detected user is: ${env.USER}"/>
         </then>
      </elseif>
      </if>
      <echo message="host name is: ${os.name}"/>
      <echo message="host arch is: ${os.arch}"/>
      <echo message="host version is: ${os.version}"/>

      <!-- Platform identification -->
      <condition property="build.host.islinux">
        <and>
          <os family="unix" />
          <not>
            <contains string="${os.name}" substring="mac"
                      casesensitive="false" />
          </not>
        </and>
      </condition>
      <condition property="build.host.platform" value="linux">
        <isset property="build.host.islinux" />
      </condition>

      <condition property="build.host.ismac">
        <and>
          <os family="unix" />
          <contains string="${os.name}" substring="mac" casesensitive="false"/>
        </and>
      </condition>
      <condition property="build.host.platform" value="mac">
        <isset property="build.host.ismac" />
      </condition>

      <fail unless="build.host.platform"
            message="Building on ${os.name} is not supported" />
      <echo message="build.host.platform is: ${build.host.platform}"/>
      <if>
         <isset property="build.host.ismac"/>
         <then>
            <echo message="detected a mac host"/>
            <property name="cxxflag" value="-std=c++14"/>
            <property name="includepath" value="/opt/local/include:/usr/local/include"/>
            <property name="client.lib.path" value="/opt/local/lib"/>
            <property name="client.lib.list" value="c++,jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++"/>
            <property name="server.lib.path" value="/opt/local/lib"/>
            <property name="server.lib.list" value="c++,jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd"/>
         </then>
      <elseif>
         <isset property="build.host.islinux"/>
         <then>
            <echo message="detected a linux host"/>
            <property name="cxxflag" value="-std=c++14"/>
	    <property name="includepath" value="/usr/local/include:/usr/include/jsoncpp"/>
	    <property name="client.lib.path" value="/usr/local/lib"/>
            <property name="client.lib.list" value="jsoncpp,jsonrpccpp-client,jsonrpccpp-common,microhttpd,stdc++,fltk"/>
	    <property name="server.lib.path" value="/usr/local/lib"/>
            <property name="server.lib.list" value="jsoncpp,jsonrpccpp-server,jsonrpccpp-common,microhttpd,stdc++"/>
         </then>
      </elseif>
      <else>
         <echo message="failed to detect a host I know how to build on"/>
      </else>
   </if>
   </target>

   <target name="build.all"
           depends="clean,prepare,build.cpp.server,build.cpp.client,build.java.client"
           description="Clean then build cpp server, cpp client and java client"/>

   <target name="generate.client.stub" depends="prepare">
      <exec dir="${basedir}" executable="jsonrpcstub">
         <arg line="${json.file.name} --cpp-client=waypointclientstub"/>
      </exec>
      <copy file="waypointclientstub.h"
            tofile="${src.dir}/cpp/client/waypointclientstub.h"/>
      <delete file="waypointclientstub.h"/>
   </target>

   <target name="build.cpp.client" depends="generate.client.stub">
      <cc outtype="executable" subsystem="console"
          outfile="${dist.dir}/waypointRPCClient"
          objdir="${obj.dir}/client">
         <compilerarg value="${cxxflag}"/>
	 <linkerarg location="end" value="-lm"/>
	 <includepath>
            <pathelement path="${includepath}"/>
         </includepath>
         <libset dir="${client.lib.path}" libs="${client.lib.list}"/>
	 <fileset dir="${src.dir}/cpp/client" includes="samplemain.cpp,WaypointGUI.cpp"/>
	 <fileset dir="${src.dir}/cpp/server" includes="Waypoint.cpp,WaypointLibrary.cpp"/>
      </cc>
   </target>

   <target name="generate.server.stub" depends="prepare">
      <exec dir="${basedir}" executable="jsonrpcstub">
         <arg line="${json.file.name} --cpp-server=waypointserverstub"/>
      </exec>
      <copy file="waypointserverstub.h"
            tofile="${src.dir}/cpp/server/waypointserverstub.h"/>
      <delete file="waypointserverstub.h"/>
   </target>

   <target name="build.cpp.server" depends="generate.server.stub">
     <cc outtype="executable" subsystem="console"
         outfile="${dist.dir}/waypointRPCServer"
         objdir="${obj.dir}/server">
         <compiler name="g++"/>
         <compilerarg value="${cxxflag}"/>
	 <linkerarg location="end" value="-lm"/>
         <includepath>
            <pathelement path="${includepath}"/>
         </includepath>
         <libset dir="${server.lib.path}" libs="${server.lib.list}"/>
         <fileset dir="${src.dir}/cpp/server"
		 includes="Waypoint.cpp,WaypointLibrary.cpp,WaypointServer.cpp"/>
      </cc>
   </target>

   
   <target name="build.java.client" depends="prepare"
          description="Compile Java client sources">
     <!-- Compile Java classes as necessary -->
     
     <javac srcdir="${src.dir}/java/client"
            destdir="${classes.dir}"
            includeantruntime="false">
        <classpath refid="compile.classpath"/>
     </javac>
   </target>

   <target name="execute.cpp.server" depends="build.cpp.server">
	   <exec executable="./bin/waypointRPCServer"/>
   </target>
   
   <target name="execute.cpp.client" depends="build.cpp.client">
	   <exec executable="./bin/waypointRPCClient"/>
   </target>

   <target name="execute.java.client" depends="build.java.client">
	  <echo message="cli run: java -cp classes:lib/json.jar ser321.assign.SampleAssign"/>
       <parallel>
	  <exec dir="." executable="rmiregistry">
	      <arg value="localhost 8080"/>
	      <env key="CLASSPATH" path="./classes/"/>
          </exec>
	  <sequential>
	  <java classname="ser321.assign.SampleAssign" fork="yes">
              <classpath refid="compile.classpath"/>
	      <sysproperty key="java.rmi.server.hostname" value="localhost"/>
	      <arg value="localhost"/>
	      <arg value="8080"/>
	  </java>
	  </sequential>
       </parallel>
   </target>

</project>
